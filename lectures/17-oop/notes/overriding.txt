Instance Variables and Methods:
  Instance Variables (Fields):

  Polymorphism doesn't apply to variables(bc they can't be overriden)

  Instance variables are resolved at compile-time based on the reference type.
  Even though the reference points to an object of a subclass, the instance variable accessed is determined by the reference type, not      the object type.
  variable can not be overridden they can only be hided
      what this means is when a subclass has a variable with same name, it'll hide the variable of the superclass when the reference
      variable's type is of subclass. But if the reference variable is of superclass type then the variable is used from superclass

  Methods:

  Methods, if overridden, are resolved at runtime based on the object type. This is what we refer to as polymorphism in Java. The JVM
  determines which method to execute based on the actual object, not the reference type.

@Override -- only used to check if it's overriding (if it's not an error will be given) 
             and also to denote that this is overriding to inc readability

In a class hierarchy, when a method in a subclass has the same name and type signature as a method in its superclass,
then the method in the subclass is said to override the method in the superclass. When an overridden method is called
from within its subclass, it will always refer to the version of that method defined by the subclass. The version of the
method defined by the superclass will be hidden.

Method overriding occurs only when the names and the type signatures of the two methods are identical.
If they are not, then the two methods are simply overloaded.
Basically what we're trying to say here is,
if you have two methods with same name in the base class and the child classbut they have different parameters types or order or number
then there is no overriding, it's just overloading.

(Check display functions in box classes)

Dynamic Method Dispatch:

Dynamic method dispatch is the mechanism by which a call to an overridden method is resolved at run time, rather than
compile time. Dynamic method dispatch is important because this is how Java implements run-time polymorphism.
Letâ€™s begin by restating an important principle: a superclass reference variable can refer to a subclass object.
When an overridden method is called through a superclass reference, Java determines which version of that method to
execute based upon the type of the object being referred to at the time the call occurs. Thus, this determination is
made at run time.
In other words, it is the type of the object being referred to (not the type of the reference variable)
that determines which version of an overridden method will be executed.

you can imagine this by stack and heap memory
like if you have a superclass reference var, then in the stack, there is only declarations of what you can access
now when this ref var points to a subclass object in heap memory, there it is defined that what you will get when you access it.

If B extends A then you can also override a method in A through B with changing the return type of method to B.
because as stated in overloading, this will be just redefining the same method.
